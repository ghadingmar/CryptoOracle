import os
import requests
import time
import argparse
from datetime import datetime
from dotenv import load_dotenv
from plyer import notification
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è –∏–∑ .env
load_dotenv()

# --- –°–∫—Ä–∏–∂–∞–ª–∏ –û—Ä–∞–∫—É–ª–∞ ---
ETHERSCAN_API_KEY = os.getenv('ETHERSCAN_API_KEY')
API_ENDPOINT = 'https://api.etherscan.io/api'
# –ö–ª—é—á–µ–≤—ã–µ –∞–∫—Ç–∏–≤—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª—É–∂–∞—Ç "–ø–æ–¥–Ω–æ—à–µ–Ω–∏—è–º–∏" –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –¥–µ–ª
OFFERING_ASSETS = {
    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2': {'symbol': 'WETH', 'decimals': 18},
    '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48': {'symbol': 'USDC', 'decimals': 6},
    '0xdAC17F958D2ee523a2206206994597C13D831ec7': {'symbol': 'USDT', 'decimals': 6},
}

class OracleListener:
    def __init__(self, eth_omen_threshold, stable_omen_threshold):
        if not ETHERSCAN_API_KEY:
            raise EnvironmentError("–ö–ª—é—á –∫ –∑–Ω–∞–Ω–∏—è–º (ETHERSCAN_API_KEY) –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
        
        self.eth_omen = eth_omen_threshold
        self.stable_omen = stable_omen_threshold
        self.session = requests.Session()
        self.pantheon = self.load_pantheon()
        self.seen_tx_hashes = set()

    def load_pantheon(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–∞–Ω—Ç–µ–æ–Ω –¢–∏—Ç–∞–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ watch_list.txt."""
        titans = {}
        try:
            with open('watch_list.txt', 'r') as f:
                for line in f:
                    if not line.strip() or line.startswith('#'): continue
                    parts = [p.strip() for p in line.split(',')]
                    address = parts[0].lower()
                    name = parts[1] if len(parts) > 1 else f"–¢–∏—Ç–∞–Ω ({address[:5]}...)"
                    titans[address] = {'name': name}
            if not titans: raise FileNotFoundError
            self.log(f"–ü–∞–Ω—Ç–µ–æ–Ω –∏–∑ {len(titans)} –¢–∏—Ç–∞–Ω–æ–≤ —Å–æ–±—Ä–∞–Ω. –ë–¥–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è.")
            return titans
        except FileNotFoundError:
            print("[!] –û—à–∏–±–∫–∞: —Å–≤—è—â–µ–Ω–Ω—ã–π —Å–≤–∏—Ç–æ–∫ 'watch_list.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç.", file=sys.stderr)
            sys.exit(1)

    def fetch_recent_events(self, address):
        """–°–ª—É—à–∞–µ—Ç —ç—Ñ–∏—Ä –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)."""
        params = {
            'module': 'account',
            'action': 'tokentx',
            'address': address,
            'page': 1, 'offset': 25, 'sort': 'desc',
            'apikey': ETHERSCAN_API_KEY
        }
        token_events = self.session.get(API_ENDPOINT, params=params).json().get('result', [])
        
        params['action'] = 'txlist'
        native_events = self.session.get(API_ENDPOINT, params=params).json().get('result', [])

        return (token_events or []) + (native_events or [])

    def send_vision(self, title, message):
        """–ü–æ—Å—ã–ª–∞–µ—Ç –ø—Ä–æ—Ä–æ—á–µ—Å–∫–æ–µ –≤–∏–¥–µ–Ω–∏–µ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª."""
        try:
            notification.notify(title=title, message=message, app_name='CryptoOracle', timeout=30)
        except Exception as e:
            print(f"[!] –í–∏–¥–µ–Ω–∏–µ –Ω–µ —Å–º–æ–≥–ª–æ –ø—Ä–æ–±–∏—Ç—å—Å—è —Å–∫–≤–æ–∑—å –ø–µ–ª–µ–Ω—É —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: {e}", file=sys.stderr)

    def log(self, message):
        print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")

    def start_vigil(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–¥–µ–Ω–∏—è –û—Ä–∞–∫—É–ª–∞."""
        self.log("üîÆ CryptoOracle –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ–µ –±–¥–µ–Ω–∏–µ...")
        self.log(f"–ó–Ω–∞–º–µ–Ω–∏–µ ETH: > {self.eth_omen}, –ó–Ω–∞–º–µ–Ω–∏–µ —Å—Ç–µ–π–±–ª–æ–≤: > {self.stable_omen}.")

        try:
            while True:
                for address, data in self.pantheon.items():
                    events = self.fetch_recent_events(address)
                    
                    for event in events:
                        event_hash = event['hash']
                        if event_hash in self.seen_tx_hashes: continue
                        
                        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–Ω–æ—à–µ–Ω–∏—è
                        if event['to'].lower() != address:
                            self.seen_tx_hashes.add(event_hash)
                            continue

                        is_native = 'tokenSymbol' not in event
                        amount, symbol, threshold = 0, '', 0

                        if is_native:
                            amount = int(event['value']) / 10**18
                            symbol, threshold = 'ETH', self.eth_omen
                        else: # –≠—Ç–æ —Ç–æ–∫–µ–Ω ERC20
                            token_addr = event['contractAddress'].lower()
                            if token_addr in OFFERING_ASSETS:
                                token = OFFERING_ASSETS[token_addr]
                                amount = int(event['value']) / 10**token['decimals']
                                symbol = token['symbol']
                                threshold = self.eth_omen if symbol == 'WETH' else self.stable_omen

                        if amount >= threshold:
                            self.log("‚ùóÔ∏è –û–†–ê–ö–£–õ –ì–û–í–û–†–ò–¢! –ü–û–õ–£–ß–ï–ù–û –í–ò–î–ï–ù–ò–ï!")
                            self.log(f"–¢–∏—Ç–∞–Ω: {data['name']} ({address[:6]}...{address[-4:]})")
                            self.log(f"–ü–æ–¥–Ω–æ—à–µ–Ω–∏–µ: {amount:.2f} {symbol}")
                            self.log(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: https://etherscan.io/tx/{event_hash}")
                            
                            title = f"üîÆ –í–∏–¥–µ–Ω–∏–µ –æ—Ç –û—Ä–∞–∫—É–ª–∞: {data['name']}"
                            message = f"–°–æ–≤–µ—Ä—à–µ–Ω–æ –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ –≤ {amount:.2f} {symbol}.\n–í–µ–ª–∏–∫–æ–µ –¥–µ—è–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–ª–∏–∑–∫–æ."
                            self.send_vision(title, message)
                        
                        self.seen_tx_hashes.add(event_hash)
                    
                    time.sleep(3) # –î–∞–µ–º –û—Ä–∞–∫—É–ª—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥—É—Ö –º–µ–∂–¥—É –¢–∏—Ç–∞–Ω–∞–º–∏
                
                # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –û—Ä–∞–∫—É–ª–∞, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–æ—à–µ–ª —Å —É–º–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–Ω–∏–π
                if len(self.seen_tx_hashes) > 1500: self.seen_tx_hashes.clear()
                
                time.sleep(45) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —ç—Ñ–∏—Ä–∞
        except KeyboardInterrupt:
            self.log("üîÆ –û—Ä–∞–∫—É–ª —É–º–æ–ª–∫–∞–µ—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–∑—ã–≤–∞.")
            sys.exit(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="CryptoOracle - –≤–∞—à –ø—Ä–æ–≤–∏–¥–µ—Ü –≤ –º–∏—Ä–µ –±–ª–æ–∫—á–µ–π–Ω–∞.")
    parser.add_argument("--eth-omen", type=float, default=10.0, help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–¥–Ω–æ—à–µ–Ω–∏—è –≤ ETH/WETH –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–Ω–∏—è.")
    parser.add_argument("--stable-omen", type=float, default=20000.0, help="–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–¥–Ω–æ—à–µ–Ω–∏—è –≤ USDC/USDT.")
    
    args = parser.parse_args()
    
    try:
        oracle = OracleListener(args.eth_omen, args.stable_omen)
        oracle.start_vigil()
    except (ValueError, EnvironmentError) as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–∑—ã–≤–∞ –û—Ä–∞–∫—É–ª–∞: {e}", file=sys.stderr)
